import logging
from telegram import Update
from telegram.constants import ChatAction
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes, ConversationHandler
from config import TELEGRAM_TOKEN
from database import Database
from api_client import RecipeAPI
from keyboards import Keyboards
from telegram import InlineKeyboardButton, InlineKeyboardMarkup

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
WAITING_FOR_SEARCH_QUERY = 1

class RecipeBot:
    def __init__(self):
        self.db = Database()
        self.api = RecipeAPI()
        self.keyboards = Keyboards()
        
        # –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.user_states = {}  # {user_id: {'search_results': [], 'current_page': 0, 'favorites': [], 'fav_page': 0}}
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        welcome_text = f"""
üçΩÔ∏è –ü—Ä–∏–≤–µ—Ç, {user.first_name}! 

–Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –±–ª—é–¥. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:

üîç **–ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤** - –Ω–∞–π–¥—É —Ä–µ—Ü–µ–ø—Ç—ã –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É
‚≠ê **–ò–∑–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã** - —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è —Ä–µ—Ü–µ–ø—Ç—ã
üé≤ **–°–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç** - –ø—Ä–µ–¥–ª–æ–∂—É —Å–ª—É—á–∞–π–Ω–æ–µ –±–ª—é–¥–æ
‚≠ê **–†–µ–π—Ç–∏–Ω–≥** - –æ—Ü–µ–Ω–∏–≤–∞–π—Ç–µ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã –æ—Ç 1 –¥–æ 5 –∑–≤–µ–∑–¥
üì∫ **–í–∏–¥–µ–æ—Ä–µ—Ü–µ–ø—Ç—ã** - —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏–¥–µ–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
        """
        
        await update.message.reply_text(
            welcome_text,
            reply_markup=self.keyboards.get_main_menu()
        )
    
    async def handle_search_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤"""
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ –∏–ª–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞:",
            reply_markup=self.keyboards.get_cancel_keyboard()
        )
        return WAITING_FOR_SEARCH_QUERY

    async def handle_main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        text = update.message.text
        logger.info(f"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: –ø–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç '{text}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
        user_id = update.effective_user.id
        
        if text == "üîç –ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤":
            await update.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ –∏–ª–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞:",
                reply_markup=self.keyboards.get_cancel_keyboard()
            )
            return WAITING_FOR_SEARCH_QUERY
        
        elif text == "‚≠ê –ú–æ–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã":
            await self.show_favorites(update, context)
            return ConversationHandler.END
        
        elif text == "üé≤ –°–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç":
            await self.show_random_recipe(update, context)
            return ConversationHandler.END
        
        # –õ—é–±–æ–π –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç —Ç—Ä–∞–∫—Ç—É–µ–º –∫–∞–∫ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞
        logger.info("–¢—Ä–∞–∫—Ç—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–∞–∫ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
        return await self.search_recipes(update, context)
    
    async def search_recipes(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤"""
        query = update.message.text
        user_id = update.effective_user.id
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –∏–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
        try:
            await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=ChatAction.TYPING)
        except Exception:
            pass
        await update.message.reply_text("üîç –ò—â—É —Ä–µ—Ü–µ–ø—Ç—ã...")
        
        # –ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤ —á–µ—Ä–µ–∑ API
        try:
            await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=ChatAction.TYPING)
        except Exception:
            pass
        recipes = self.api.search_recipes(query)
        
        if not recipes:
            await update.message.reply_text(
                f"üòî –ü–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å:",
                reply_markup=self.keyboards.get_cancel_keyboard()
            )
            return WAITING_FOR_SEARCH_QUERY
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        self.user_states[user_id] = {
            'search_results': recipes,
            'current_page': 0,
            'favorites': [],
            'fav_page': 0
        }
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ—Ü–µ–ø—Ç
        await self.show_recipe(update, context, recipes[0], is_search=True)
        return ConversationHandler.END
    
    async def show_recipe(self, update: Update, context: ContextTypes.DEFAULT_TYPE, recipe, is_search=False, is_favorite=False):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç"""
        user_id = update.effective_user.id

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ä–µ—Ü–µ–ø—Ç–∞
        recipe_text = f"""
    üçΩÔ∏è **{recipe['name']}**

    üìù **–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:**
    """

        for ingredient in recipe['ingredients']:
            if ingredient.get('amount') and ingredient.get('unit'):
                recipe_text += f"‚Ä¢ {ingredient['amount']} {ingredient['unit']} {ingredient['name']}\n"
            elif ingredient.get('amount'):
                recipe_text += f"‚Ä¢ {ingredient['amount']} {ingredient['name']}\n"
            else:
                recipe_text += f"‚Ä¢ {ingredient['name']}\n"

        recipe_text += f"""
    üìã **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**
    {recipe['instructions']}

    """

        if recipe.get('video'):
            recipe_text += f"üì∫ **–í–∏–¥–µ–æ—Ä–µ—Ü–µ–ø—Ç:** {recipe['video']}\n\n"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ä–µ—Ü–µ–ø—Ç –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
        is_in_favorites = self.db.is_recipe_favorite(user_id, recipe['id'])

        # –í—ã–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        if is_search:
            user_state = self.user_states.get(user_id, {})
            current_page = user_state.get('current_page', 0)
            total_pages = len(user_state.get('search_results', [])) or 1
            keyboard = self.keyboards.get_search_results_navigation(current_page, total_pages, recipe['id'])
        elif is_favorite:
            rating = 0
            favorites = self.user_states.get(user_id, {}).get('favorites', [])
            for fav in favorites:
                if fav['id'] == recipe['id']:
                    rating = fav.get('rating', 0)
                    break
            keyboard = self.keyboards.get_favorite_recipe_actions(recipe['id'], rating)
        else:
            keyboard = self.keyboards.get_recipe_actions(recipe['id'], is_in_favorites)

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –ø–æ–¥–ø–∏—Å–∏
        if len(recipe_text) > 1000:
            recipe_caption = recipe_text[:1000] + "...\n\n(–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–∫—Ä–∞—â–µ–Ω–æ)"
        else:
            recipe_caption = recipe_text

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
        if recipe.get('image'):
            try:
                await context.bot.send_photo(
                    chat_id=update.effective_chat.id,
                    photo=recipe['image'],
                    caption=recipe_caption,
                    reply_markup=keyboard,
                    parse_mode='HTML'
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
                # –†–µ–∑–µ—Ä–≤: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–¥–µ–ª—å–Ω–æ
                await update.message.reply_text(
                    "üñºÔ∏è –§–æ—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –Ω–æ –≤–æ—Ç —Ä–µ—Ü–µ–ø—Ç:",
                    parse_mode='HTML'
                )
                await update.message.reply_text(
                    recipe_text,
                    reply_markup=keyboard,
                    parse_mode='HTML'
                )
        else:
            await update.message.reply_text(
                recipe_text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )

    def _format_recipe_caption(self, recipe):
        caption = f"üçΩÔ∏è **{recipe['name']}**\n\n"
        
        caption += "**üìù –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:**\n"
        for ingr in recipe['ingredients'][:8]:
            name = ingr.get('name', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            amount = ingr.get('amount', '')
            unit = ingr.get('unit', '')
            if amount and unit:
                caption += f"‚Ä¢ {amount} {unit} {name}\n"
            elif amount:
                caption += f"‚Ä¢ {amount} {name}\n"
            else:
                caption += f"‚Ä¢ {name}\n"
        
        if len(recipe['ingredients']) > 8:
            caption += "‚Ä¢ –∏ –µ—â—ë...\n"
        
        caption += f"\n**üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**\n{recipe['instructions'][:300]}...\n"
        
        if recipe.get('video'):
            caption += "\nüì∫ –ù–∞–∂–º–∏—Ç–µ '–í–∏–¥–µ–æ—Ä–µ—Ü–µ–ø—Ç' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"
        
        return caption[:1000] + "..." if len(caption) > 1000 else caption

    def get_favorites_navigation_keyboard(self, current_page: int, total_pages: int, recipe_id: str):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∏–∑–±—Ä–∞–Ω–Ω—ã–º"""
        buttons = []

        # –ö–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" / "–í–ø–µ—Ä—ë–¥"
        if current_page > 0:
            buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"prev_fav_page:{current_page}"))
        if current_page < total_pages - 1:
            buttons.append(InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"next_fav_page:{current_page}"))

        # –ö–Ω–æ–ø–∫–∞ "–ü–æ–¥—Ä–æ–±–Ω–µ–µ"
        buttons.append([InlineKeyboardButton("üîç –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"view_fav:{recipe_id}")])

        # –ö–Ω–æ–ø–∫–∞ "–í –º–µ–Ω—é"
        buttons.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])

        return InlineKeyboardMarkup(buttons)

    async def show_favorites(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã ‚Äî —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π"""
        user_id = update.effective_user.id
        favorites = self.db.get_favorite_recipes(user_id)

        if not favorites:
            await update.message.reply_text(
                "‚≠ê –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤.\n–ù–∞–π–¥–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç –∏ –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ!",
                reply_markup=self.keyboards.get_main_menu()
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if user_id not in self.user_states:
            self.user_states[user_id] = {}
        self.user_states[user_id]['favorites'] = favorites
        self.user_states[user_id]['fav_page'] = 0  # ‚Üê –Ω–∞—á–∏–Ω–∞–µ–º —Å 0

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ—Ü–µ–ø—Ç —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
        await self.show_favorite_with_navigation(update, context, 0)
    
    async def show_favorite_with_navigation(self, update: Update, context: ContextTypes.DEFAULT_TYPE, page: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π"""
        user_id = update.effective_user.id
        favorites = self.user_states.get(user_id, {}).get('favorites', [])

        if not favorites:
            await update.message.reply_text("–ù–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤.")
            return

        if page < 0 or page >= len(favorites):
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        self.user_states[user_id]['fav_page'] = page
        recipe = favorites[page]

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
        caption = f"[{page + 1}/{len(favorites)}] üçΩÔ∏è **{recipe['name']}**\n\n"
        caption += f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {recipe.get('rating', 0)}\n\n"
        caption += f"üìù –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤: {len(recipe['ingredients'])}\n"
        caption += "–ù–∞–∂–º–∏—Ç–µ '–ü–æ–¥—Ä–æ–±–Ω–µ–µ' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞."

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞: –Ω–∞–≤–∏–≥–∞—Ü–∏—è + –¥–µ–π—Å—Ç–≤–∏—è
        keyboard = self.keyboards.get_favorites_navigation(
            current_page=page,
            total_pages=len(favorites),
            recipe_id=recipe['id']
        )


        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
        if recipe.get('image'):
            try:
                await context.bot.send_photo(
                    chat_id=update.effective_chat.id,
                    photo=recipe['image'],
                    caption=caption,
                    reply_markup=keyboard,
                    parse_mode='HTML'
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
                await update.message.reply_text(caption, reply_markup=keyboard, parse_mode='HTML')
        else:
            await update.message.reply_text(caption, reply_markup=keyboard, parse_mode='HTML')
    
    async def show_random_recipe(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç"""
        await update.message.reply_text("üé≤ –ò—â—É —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç...")
        
        recipe = self.api.get_random_recipe()
        
        if not recipe:
            await update.message.reply_text(
                "üòî –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=self.keyboards.get_main_menu()
            )
            return
        
        await self.show_recipe(update, context, recipe)
    
    async def show_favorite_detail(self, update: Update, context: ContextTypes.DEFAULT_TYPE, recipe_id: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ü–µ–ø—Ç–µ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
        user_id = update.effective_user.id
        favorites = self.user_states.get(user_id, {}).get('favorites', [])
        
        recipe = next((r for r in favorites if r['id'] == recipe_id), None)
        if not recipe:
            await update.callback_query.answer("‚ùå –†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
        caption = f"""
    üçΩÔ∏è **{recipe['name']}**

    üìù **–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:**
    """
        for ingr in recipe['ingredients'][:8]:
            name = ingr.get('name', '')
            amount = ingr.get('amount', '')
            unit = ingr.get('unit', '')
            if amount and unit:
                caption += f"‚Ä¢ {amount} {unit} {name}\n"
            elif amount:
                caption += f"‚Ä¢ {amount} {name}\n"
            else:
                caption += f"‚Ä¢ {name}\n"

        if len(recipe['ingredients']) > 8:
            caption += "‚Ä¢ –∏ –µ—â—ë...\n"

        caption += f"""
    üìã **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**
    {recipe['instructions'][:300]}...

    """
        if recipe.get('video'):
            caption += f"üì∫ **–í–∏–¥–µ–æ—Ä–µ—Ü–µ–ø—Ç:** {recipe['video']}\n"

        # –û–±—Ä–µ–∑–∞–µ–º –ø–æ–¥–ø–∏—Å—å
        if len(caption) > 1024:
            caption = caption[:1000] + "...\n\n(–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–∫—Ä–∞—â–µ–Ω–æ)"

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        keyboard = self.keyboards.get_favorite_recipe_actions(recipe_id, recipe.get('rating', 0))

        try:
            await update.callback_query.edit_message_caption(
                caption=caption,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π: {e}")

    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        query = update.callback_query
        await query.answer()
        
        user_id = update.effective_user.id
        data = query.data
        
        if data.startswith("add_favorite:"):
            await self.add_to_favorites(update, context, data.split(":")[1])
        
        elif data.startswith("remove_favorite:"):
            await self.remove_from_favorites(update, context, data.split(":")[1])
        
        elif data.startswith("rate:"):
            parts = data.split(":")
            recipe_id = parts[1]
            rating = int(parts[2])
            await self.rate_recipe(update, context, recipe_id, rating)
        
        elif data.startswith("change_rating:"):
            recipe_id = data.split(":")[1]
            await self.show_rating_keyboard(update, context, recipe_id)
        
        elif data.startswith("skip_rating:"):
            await self.skip_rating(update, context)
        
        elif data.startswith("video:"):
            recipe_id = data.split(":")[1]
            await self.show_video(update, context, recipe_id)
        
        elif data == "back_to_search":
            await self.back_to_search(update, context)
        
        elif data == "back_to_favorites":
            await self.back_to_favorites(update, context)
        
        elif data == "main_menu":
            await self.back_to_main_menu(update, context)
        
        elif data == "new_search":
            await self.new_search(update, context)
        
        elif data.startswith("prev_page:"):
            page = int(data.split(":")[1])
            await self.navigate_search_results(update, context, page - 1)
        
        elif data.startswith("next_page:"):
            page = int(data.split(":")[1])
            await self.navigate_search_results(update, context, page + 1)
        
        elif data.startswith("prev_fav_page:"):
            page = int(data.split(":")[1])
            await self.navigate_favorites(update, context, page - 1)
        
        elif data.startswith("next_fav_page:"):
            page = int(data.split(":")[1])
            await self.navigate_favorites(update, context, page + 1)
        
        elif data.startswith("view_fav:"):
            recipe_id = data.split(":")[1]
            await self.show_favorite_detail(update, context, recipe_id)
    
    async def add_to_favorites(self, update: Update, context: ContextTypes.DEFAULT_TYPE, recipe_id):
        user_id = update.effective_user.id
        recipe = self.api.get_recipe_by_id(recipe_id)
        if not recipe:
            await update.callback_query.answer("‚ùå –†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        if self.db.is_recipe_favorite(user_id, recipe_id):
            await update.callback_query.answer("–£–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º!")
            return

        if self.db.add_favorite_recipe(user_id, recipe):
            await update.callback_query.edit_message_caption(
                caption="‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ! –û—Ü–µ–Ω–∏—Ç–µ –±–ª—é–¥–æ:",
                reply_markup=self.keyboards.get_rating_keyboard(recipe_id),
                parse_mode='HTML'
            )
        else:
            await update.callback_query.answer("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")
    
    async def remove_from_favorites(self, update: Update, context: ContextTypes.DEFAULT_TYPE, recipe_id):
        """–£–¥–∞–ª–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
        user_id = update.effective_user.id
        success = self.db.remove_favorite_recipe(user_id, recipe_id)

        if success:
            try:
                await update.callback_query.edit_message_caption(
                    caption="‚úÖ –†–µ—Ü–µ–ø—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.",
                    reply_markup=None
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞: {e}")
        else:
            await update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.")
    
    async def rate_recipe(self, update: Update, context: ContextTypes.DEFAULT_TYPE, recipe_id, rating):
        user_id = update.effective_user.id
        success = self.db.update_recipe_rating(user_id, recipe_id, rating)
        
        if success:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç
            recipe = self.api.get_recipe_by_id(recipe_id)
            if not recipe:
                await update.callback_query.answer("‚ùå –†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –≤ –æ–±—ä–µ–∫—Ç–µ
            recipe['rating'] = rating

            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
            caption = f"‚≠ê –í—ã –æ—Ü–µ–Ω–∏–ª–∏ —Ä–µ—Ü–µ–ø—Ç –Ω–∞ {rating} –∑–≤—ë–∑–¥!\n\n{self._format_recipe_caption(recipe)}"

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            try:
                await update.callback_query.edit_message_caption(
                    caption=caption,
                    reply_markup=self.keyboards.get_favorite_recipe_actions(recipe_id, rating),
                    parse_mode='HTML'
                )
                await update.callback_query.answer("–û—Ü–µ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
                await update.callback_query.answer("–û—Ü–µ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, –Ω–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ –æ–±–Ω–æ–≤–∏–ª—Å—è.")
        else:
            await update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ.")

    async def skip_rating(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            await update.callback_query.edit_message_caption(
                caption="–û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞.",
                reply_markup=None
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞: {e}")

    async def show_video(self, update: Update, context: ContextTypes.DEFAULT_TYPE, recipe_id):
        recipe = self.api.get_recipe_by_id(recipe_id)
        if recipe and recipe.get('video'):
            video_link = recipe['video']
            try:
                await update.callback_query.edit_message_caption(
                    caption=f"üì∫ **–í–∏–¥–µ–æ—Ä–µ—Ü–µ–ø—Ç:**\n{video_link}",
                    parse_mode='HTML'
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞: {e}")
        else:
            await update.callback_query.answer("üì∫ –í–∏–¥–µ–æ—Ä–µ—Ü–µ–ø—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        
    async def navigate_search_results(self, update: Update, context: ContextTypes.DEFAULT_TYPE, page):
        """–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø–æ–∏—Å–∫–∞"""
        user_id = update.effective_user.id
        user_state = self.user_states.get(user_id, {})
        search_results = user_state.get('search_results', [])
        
        if 0 <= page < len(search_results):
            user_state['current_page'] = page
            recipe = search_results[page]
            
            await self.update_recipe_message(update, context, recipe, is_search=True)
    
    async def navigate_favorites(self, update: Update, context: ContextTypes.DEFAULT_TYPE, page):
        """–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∏–∑–±—Ä–∞–Ω–Ω—ã–º —Ä–µ—Ü–µ–ø—Ç–∞–º"""
        user_id = update.effective_user.id
        user_state = self.user_states.get(user_id, {})
        favorites = user_state.get('favorites', [])
        
        if 0 <= page < len(favorites):
            user_state['fav_page'] = page
            recipe = favorites[page]
            
            await self.show_favorite_with_navigation(update, context, page)
    
    async def update_recipe_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE, recipe, is_search=False, is_favorite=False):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ—Ü–µ–ø—Ç–æ–º (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ)"""
        user_id = update.effective_user.id

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        recipe_text = f"""
    üçΩÔ∏è **{recipe['name']}**

    üìù **–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:**
    """
        for ingredient in recipe['ingredients']:
            if ingredient.get('amount') and ingredient.get('unit'):
                recipe_text += f"‚Ä¢ {ingredient['amount']} {ingredient['unit']} {ingredient['name']}\n"
            elif ingredient.get('amount'):
                recipe_text += f"‚Ä¢ {ingredient['amount']} {ingredient['name']}\n"
            else:
                recipe_text += f"‚Ä¢ {ingredient['name']}\n"

        recipe_text += f"""
    üìã **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**
    {recipe['instructions']}

    """
        if recipe.get('video'):
            recipe_text += f"üì∫ **–í–∏–¥–µ–æ—Ä–µ—Ü–µ–ø—Ç:** {recipe['video']}\n\n"

        # –û–±—Ä–µ–∑–∞–µ–º –ø–æ–¥–ø–∏—Å—å
        caption = recipe_text[:1000] + "..." if len(recipe_text) > 1000 else recipe_text

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        if is_favorite:
            rating = recipe.get('rating', 0)
            keyboard = self.keyboards.get_favorite_recipe_actions(recipe['id'], rating)
        else:
            is_in_fav = self.db.is_recipe_favorite(user_id, recipe['id'])
            keyboard = self.keyboards.get_recipe_actions(recipe['id'], is_in_fav)

        # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å—å
        try:
            await update.callback_query.edit_message_caption(
                caption=caption,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
        except Exception as e:
            if "message is not modified" in str(e):
                pass
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∏: {e}")
                # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å ‚Äî –ø—Ä–æ–±—É–µ–º –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç
                try:
                    await update.callback_query.edit_message_text(
                        text=caption,
                        reply_markup=keyboard,
                        parse_mode='HTML'
                    )
                except Exception as e2:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e2}")
    
    async def back_to_search(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–∏—Å–∫—É ‚Äî —É–¥–∞–ª—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç"""
        query = update.callback_query
        await query.answer()

        try:
            await query.delete_message()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")

        try:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ –∏–ª–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞:",
                reply_markup=self.keyboards.get_cancel_keyboard(),
                parse_mode='HTML'
            )
            return WAITING_FOR_SEARCH_QUERY
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞: {e}")
    
    async def back_to_favorites(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–º—É"""
        await self.show_favorites(update, context)
    
    async def back_to_main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω–æ: —É–¥–∞–ª—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–Ω–æ–≤–æ"""
        query = update.callback_query
        await query.answer()

        try:
            # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é)
            await query.delete_message()
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å ‚Äî —Ö–æ—Ç—è –±—ã –∑–∞–∫—Ä—ã–≤–∞–µ–º callback
            return

        # –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
        user = update.effective_user
        welcome_text = f"""
    üçΩÔ∏è –ü—Ä–∏–≤–µ—Ç, {user.first_name}!  

    –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
        """
        try:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=welcome_text,
                reply_markup=self.keyboards.get_main_menu(),
                parse_mode='HTML'
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: {e}")
    
    async def new_search(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–æ–≤—ã–π –ø–æ–∏—Å–∫"""
        await update.callback_query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ –∏–ª–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞:",
            reply_markup=self.keyboards.get_cancel_keyboard()
        )
        return WAITING_FOR_SEARCH_QUERY
    
    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        await update.message.reply_text(
            "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=self.keyboards.get_main_menu()
        )
        return ConversationHandler.END
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if not TELEGRAM_TOKEN:
            logger.error("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω TELEGRAM_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(TELEGRAM_TOKEN).build()
        
        # –°–æ–∑–¥–∞–µ–º ConversationHandler —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–∏—Å–∫–∞
        conv_handler = ConversationHandler(
            entry_points=[
                MessageHandler(filters.Regex("^üîç –ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤$"), self.handle_search_start)
            ],
            states={
                WAITING_FOR_SEARCH_QUERY: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.search_recipes),
                    CallbackQueryHandler(self.handle_callback, pattern="^cancel$")
                ]
            },
            fallbacks=[
                CommandHandler("cancel", self.cancel),
                MessageHandler(filters.COMMAND, self.cancel)
            ],
            per_message=True  # ‚Üê –≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è callback-–∫–Ω–æ–ø–æ–∫
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", self.start))
        application.add_handler(conv_handler)
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_main_menu))
        application.add_handler(CallbackQueryHandler(self.handle_callback))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        try:
            application.run_polling(allowed_updates=Update.ALL_TYPES)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ polling: {e}")
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –∑–∞–ø—É—Å–∫–∞
            application.run_polling()

if __name__ == "__main__":
    bot = RecipeBot()
    bot.run()
