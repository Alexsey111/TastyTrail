import requests
import json
import logging
from config import SPOONACULAR_API_KEY, THEMEALDB_API_URL
from translator import TranslatorService

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class RecipeAPI:
    def __init__(self):
        self.spoonacular_api_key = SPOONACULAR_API_KEY
        self.themealdb_url = THEMEALDB_API_URL
        self.translator = TranslatorService()
    
    def search_recipes_themedb(self, query):
        """–ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤ —á–µ—Ä–µ–∑ TheMealDB API"""
        logger.info(f"üîç TheMealDB –ø–æ–∏—Å–∫: '{query}'")
        try:
            url = f"{self.themealdb_url}/search.php"
            params = {'s': query}
            
            logger.info(f"üì° –ó–∞–ø—Ä–æ—Å –∫ TheMealDB: {url} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ {params}")
            response = requests.get(url, params=params)
            response.raise_for_status()
            
            data = response.json()
            meals = data.get('meals') or []
            logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç TheMealDB: {len(meals)} —Ä–µ—Ü–µ–ø—Ç–æ–≤")
            
            if not meals:
                logger.warning("‚ö†Ô∏è TheMealDB –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ—Ü–µ–ø—Ç–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞")
                return []
            
            recipes = []
            for meal in meals:
                recipe = {
                    'id': meal['idMeal'],
                    'name': meal['strMeal'],
                    'image': meal['strMealThumb'],
                    'instructions': meal['strInstructions'],
                    'ingredients': self._extract_ingredients(meal),
                    'video': meal.get('strYoutube', ''),
                    'source': 'TheMealDB'
                }
                recipes.append(recipe)
            
            logger.info(f"‚úÖ TheMealDB –Ω–∞–π–¥–µ–Ω–æ {len(recipes)} —Ä–µ—Ü–µ–ø—Ç–æ–≤")
            return recipes
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤ (TheMealDB): {e}")
            return []
    
    def search_recipes_spoonacular(self, query):
        """–ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤ —á–µ—Ä–µ–∑ Spoonacular API"""
        if not self.spoonacular_api_key:
            return []
        
        try:
            url = "https://api.spoonacular.com/recipes/complexSearch"
            params = {
                'apiKey': self.spoonacular_api_key,
                'query': query,
                'number': 10,
                'addRecipeInformation': True,
                'fillIngredients': True
            }
            
            response = requests.get(url, params=params)
            response.raise_for_status()
            
            data = response.json()
            
            if 'results' not in data:
                return []
            
            recipes = []
            for recipe in data['results']:
                ingredients = []
                if 'extendedIngredients' in recipe:
                    for ingredient in recipe['extendedIngredients']:
                        ingredients.append({
                            'name': ingredient.get('name', ''),
                            'amount': ingredient.get('amount', ''),
                            'unit': ingredient.get('unit', '')
                        })
                
                recipe_data = {
                    'id': str(recipe['id']),
                    'name': recipe['title'],
                    'image': recipe.get('image', ''),
                    'instructions': recipe.get('instructions', ''),
                    'ingredients': ingredients,
                    'video': '',  # Spoonacular –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤–∏–¥–µ–æ –≤ –±–∞–∑–æ–≤–æ–º –ø–æ–∏—Å–∫–µ
                    'source': 'Spoonacular'
                }
                recipes.append(recipe_data)
            
            return recipes
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤ (Spoonacular): {e}")
            return []
    
    def search_recipes(self, query):
        """–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–µ—Ä–µ–≤–æ–¥–∞ ru‚Üíen."""
        logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: '{query}'")
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π, –µ—Å–ª–∏ –æ–Ω –Ω–∞ —Ä—É—Å—Å–∫–æ–º
        query_en = self.translator.russian_to_english(query)
        logger.info(f"üîÑ –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å: '{query}' ‚Üí '{query_en}'")

        recipes = []
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º TheMealDB (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π)
        themedb_recipes = self.search_recipes_themedb(query_en)
        recipes.extend(themedb_recipes)

        # –ï—Å–ª–∏ –µ—Å—Ç—å API –∫–ª—é—á Spoonacular, –¥–æ–±–∞–≤–ª—è–µ–º –∏ –µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if self.spoonacular_api_key:
            logger.info("üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º Spoonacular API")
            spoonacular_recipes = self.search_recipes_spoonacular(query_en)
            recipes.extend(spoonacular_recipes)
        else:
            logger.info("‚ö†Ô∏è Spoonacular API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        from config import MAX_RECIPES_PER_SEARCH
        if len(recipes) > MAX_RECIPES_PER_SEARCH:
            logger.info(f"‚úÇÔ∏è –û–±—Ä–µ–∑–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ {MAX_RECIPES_PER_SEARCH}")
            recipes = recipes[:MAX_RECIPES_PER_SEARCH]

        logger.info(f"üìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤: {len(recipes)}")

        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if recipes:
            logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫")
            for i, recipe in enumerate(recipes):
                logger.info(f"   –ü–µ—Ä–µ–≤–æ–¥ —Ä–µ—Ü–µ–ø—Ç–∞ {i+1}: {recipe.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                
                if recipe.get('name'):
                    original_name = recipe['name']
                    recipe['name'] = self.translator.english_to_russian(recipe['name'])
                    logger.info(f"     –ù–∞–∑–≤–∞–Ω–∏–µ: '{original_name}' ‚Üí '{recipe['name']}'")
                
                if recipe.get('instructions'):
                    recipe['instructions'] = self.translator.english_to_russian(recipe['instructions'])
                    logger.info(f"     –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã")
                
                # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
                if recipe.get('ingredients'):
                    translated_ingredients = []
                    for ing in recipe['ingredients']:
                        name = ing.get('name', '')
                        if name:
                            translated_name = self.translator.english_to_russian(name)
                            logger.info(f"     –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç: '{name}' ‚Üí '{translated_name}'")
                        else:
                            translated_name = name
                        translated_ingredients.append({
                            'name': translated_name,
                            'amount': ing.get('amount', ''),
                            'unit': ing.get('unit', '')
                        })
                    recipe['ingredients'] = translated_ingredients

        logger.info(f"‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω. –í–æ–∑–≤—Ä–∞—â–∞–µ–º {len(recipes)} —Ä–µ—Ü–µ–ø—Ç–æ–≤")
        return recipes
    
    def get_random_recipe(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞"""
        try:
            url = f"{self.themealdb_url}/random.php"
            response = requests.get(url)
            response.raise_for_status()
            
            data = response.json()
            
            if data.get('meals') is None:
                return None
            
            meal = data['meals'][0]
            recipe = {
                'id': meal['idMeal'],
                'name': meal['strMeal'],
                'image': meal['strMealThumb'],
                'instructions': meal['strInstructions'],
                'ingredients': self._extract_ingredients(meal),
                'video': meal.get('strYoutube', ''),
                'source': 'TheMealDB'
            }
            
            return recipe
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞: {e}")
            return None
    
    def _extract_ingredients(self, meal):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –∏–∑ –¥–∞–Ω–Ω—ã—Ö TheMealDB"""
        ingredients = []
        
        for i in range(1, 21):  # TheMealDB –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –¥–æ 20 –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
            ingredient = meal.get(f'strIngredient{i}')
            measure = meal.get(f'strMeasure{i}')
            
            if ingredient and ingredient.strip():
                ingredients.append({
                    'name': ingredient.strip(),
                    'amount': measure.strip() if measure else '',
                    'unit': ''
                })
        
        return ingredients
    
    def get_recipe_by_id(self, recipe_id, source='TheMealDB'):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞ –ø–æ ID"""
        if source == 'TheMealDB':
            try:
                url = f"{self.themealdb_url}/lookup.php"
                params = {'i': recipe_id}
                
                response = requests.get(url, params=params)
                response.raise_for_status()
                
                data = response.json()
                
                if data.get('meals') is None:
                    return None
                
                meal = data['meals'][0]
                recipe = {
                    'id': meal['idMeal'],
                    'name': meal['strMeal'],
                    'image': meal['strMealThumb'],
                    'instructions': meal['strInstructions'],
                    'ingredients': self._extract_ingredients(meal),
                    'video': meal.get('strYoutube', ''),
                    'source': 'TheMealDB'
                }
                
                return recipe
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞ –ø–æ ID: {e}")
                return None
        
        elif source == 'Spoonacular' and self.spoonacular_api_key:
            try:
                url = f"https://api.spoonacular.com/recipes/{recipe_id}/information"
                params = {'apiKey': self.spoonacular_api_key}
                
                response = requests.get(url, params=params)
                response.raise_for_status()
                
                recipe_data = response.json()
                
                ingredients = []
                if 'extendedIngredients' in recipe_data:
                    for ingredient in recipe_data['extendedIngredients']:
                        ingredients.append({
                            'name': ingredient.get('name', ''),
                            'amount': ingredient.get('amount', ''),
                            'unit': ingredient.get('unit', '')
                        })
                
                recipe = {
                    'id': str(recipe_data['id']),
                    'name': recipe_data['title'],
                    'image': recipe_data.get('image', ''),
                    'instructions': recipe_data.get('instructions', ''),
                    'ingredients': ingredients,
                    'video': '',
                    'source': 'Spoonacular'
                }
                
                return recipe
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞ –ø–æ ID (Spoonacular): {e}")
                return None
        
        return None
